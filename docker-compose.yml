version: "3"
name: "nlp-workbench"
services:
  api:
    build:
      dockerfile: ./build/Dockerfile.api
      target: ${COMPOSE_TARGET:-prod}
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
      - BING_KEY=${BING_KEY}
      - API_WORKERS=${API_WORKERS:-1}
    profiles:
      - non-gpu
      - debug
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 8g
        reservations:
          memory: 4g

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      target: ${COMPOSE_TARGET:-prod}
    depends_on:
      - api
      - neo4j
      - kibana
      - flower
    ports:
      - "80:80"
    profiles:
      - non-gpu
      - debug
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m

  ner:
    build:
      dockerfile: ./build/Dockerfile.ner 
      target: ${COMPOSE_TARGET:-prod}
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
    restart: unless-stopped
    profiles:
      - gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]
          memory: 1g
        limits:
          memory: 4g

  linker:
    build:
      dockerfile: ./build/Dockerfile.linker
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
    profiles:
      - non-gpu
    volumes:
      - type: "bind"
        source: /data/local/workbench-data/sqlite/data/embeddings.sqlite3 # CHANGE THIS
        target: /app/db/embeddings.sqlite3
    deploy:
      resources:
        limits:
          memory: 16g
        reservations:
          memory: 8g

  amr:
    build:
      dockerfile: ./build/Dockerfile.amr
      target: ${COMPOSE_TARGET:-prod}
    restart: unless-stopped
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
    profiles:
      - gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]

  amr2text:
    build:
      dockerfile: ./build/Dockerfile.amr2text
      target: ${COMPOSE_TARGET:-prod}
    restart: unless-stopped
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
    profiles:
      - gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['1']
              capabilities: [gpu]

  vader:
    build:
      dockerfile: ./build/Dockerfile.vader
      target: ${COMPOSE_TARGET:-prod}
    restart: unless-stopped
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
    profiles:
      - non-gpu
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m

  relation_extraction:
    build:
      dockerfile: ./build/Dockerfile.rel
    restart: unless-stopped
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
    profiles:
      - gpu
      - debug
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['1']
              capabilities: [gpu]
          memory: 1g
        limits:
          memory: 4g

  classifier:
    build:
      dockerfile: ./build/Dockerfile.classifier
      target: ${COMPOSE_TARGET:-prod}
    restart: unless-stopped
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
    volumes:
      - type: "bind"
        source: /data/local/workbench-data/classifiers # CHANGE THIS
        target: /app/models
    profiles:
      - non-gpu
      - debug

  background:
    build:
      dockerfile: ./build/Dockerfile.background
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
    profiles:
      - non-gpu
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m

  flower:
    image: mher/flower:latest
    command: celery --broker=${RPC_BROKER:-redis://redis} --result-backend=redis://redis${RPC_BROKER:-redis://redis} flower --url_prefix=flower
    ports:
      - 5555 # unpublish port
    depends_on:
      - redis
    profiles:
      - non-gpu
      - debug
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m

  redis:
    image: redis:7.0-alpine
    command: redis-server --save "" --appendonly no ${REDIS_AUTH}
    ports:
      - 6379:6379
    profiles:
      - non-gpu
      - debug
    deploy:
      resources:
        limits:
          memory: 16g
        reservations:
          memory: 8g

  neo4j:
    build:
      context: ./neo4j
    ports:
      - 7687:7687
      - 7474
    stop_grace_period: 2m
    profiles:
      - non-gpu
      - debug
    volumes:
      - type: bind
        source: /data/local/workbench-data/neo4j/data # CHANGE THIS
        target: /data
      #- type: bind
      #  source: /home/ubuntu/workbench/docker-data/neo4j-certs # CHANGE THIS
      #  target: /var/lib/neo4j/certificates
    environment:
      - NEO4J_dbms_connector_bolt_client__auth=DISABLED
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_AUTH=neo4j/wdmuofa
      #- NEO4J_dbms_connector_bolt_advertised__address=newskg.wdmuofa.ca:9201
      - NEO4J_dbms_connector_bolt_tls__level=DISABLED
      #- NEO4J_dbms_ssl_policy_bolt_enabled=true
    deploy:
      resources:
        limits:
          memory: 16g
        reservations:
          memory: 8g


  coll-neo4j:
    build:
      context: ./neo4j
    environment:
      - NEO4J_AUTH=neo4j/coll123
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
    profiles:
      - non-gpu
      - debug
    stop_grace_period: 2m
    deploy:
      resources:
        limits:
          memory: 16g
        reservations:
          memory: 8g

  coll:
    build:
      dockerfile: ./build/Dockerfile.coll
      target: ${COMPOSE_TARGET:-prod}
    restart: unless-stopped
    profiles:
      - non-gpu
      - debug
    environment:
      - RPC_BROKER=${RPC_BROKER:-redis://redis}
      - RPC_BACKEND=${RPC_BACKEND:-redis://redis}
      - BEARER_TOKEN=${BEARER_TOKEN}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - BING_KEY=${BING_KEY}
    depends_on:
      - coll-neo4j
      - redis
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m

  elasticsearch:
    image: "elasticsearch:8.2.2"
    ports:
      - 9200 # unpublish port
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # disable SSL
      - xpack.security.http.ssl.enabled=false # disable SSL
      - xpack.security.transport.ssl.enabled=false # disable SSL
      - bootstrap.memory_lock=true # disable swap
      - logger.level=ERROR
      - path.repo=/repo # for restoring from backup
    mem_limit: "16g" # TODO: increase later
    ulimits:
      memlock:
        soft: -1
        hard: -1
    profiles:
      - non-gpu
    volumes:
      - type: bind
        source: /data/local/workbench-data/es/data # CHANGE THIS
        target: /usr/share/elasticsearch/data
      - type: bind
        source: /data/local/workbench-data/es-bak # CHANGE THIS
        target: /repo
      
    deploy:
      resources:
        limits:
          memory: 16g
        reservations:
          memory: 8g


  kibana:
    image: "kibana:8.2.2"
    ports:
      - 5601 # unpublish port
    environment:
      - SERVER_NAME=kibana
      - SERVER_BASEPATH=/kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana # CHANGE THIS
      - LOGGING_ROOT_LEVEL=warn
    depends_on:
      - elasticsearch
    profiles:
      - non-gpu
      - debug
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g
